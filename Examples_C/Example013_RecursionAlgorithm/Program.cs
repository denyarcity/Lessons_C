// двумерные массивы
//=> 1 Текстовая таблица

// string [,] table = new string[2,5]; //таблица строк, которя состот из двух строк и пяти столбцов.
// //строки и столбцы начинаются с [0,0]
// table[1,2]="слово"; //для обращения к нужному элементу

//  for (int rows = 0; rows < 2; rows++)//кол-во строк
//  {
//     for (int columns = 0; columns < 5; columns++)//кол-во столбцов
//     {
//         Console.WriteLine($"+{table[rows, columns]}+");//используя интерполяцию обращаемся к элементам массива через имя массива "table", "rows" имя строки и "columns" имя столбца.
//     }//Добавлено 2+ т.к. по умолчанию данные в строках и столбцах отсутствуют.
//  }

//==> 2 Таблица с числами (вывод матрицы чисел)

// int[,] matrix = new int[3,4];

// void PrintArray(int[,] matr)//метод для вывода матрицы на экран
// {
//     for (int i = 0; i < matr.GetLength(0); i++)//GetLength(0) вместо "3" - ссылается на строки
//     {
//         for (int j = 0; j < matr.GetLength(1); j++)//GetLength(1) вместо "4" - ссылается на стобцы
//         {
//             Console.Write($"{matr[i,j]} ");//write вместо writeline, чтобы не переносить курсор ниже при выводе элемента, в противном случае все будет выведено в столбик
//         }
//     Console.WriteLine();//при выводе всех элементов в столбике, вывод данных начнется в новом столбике.
//     }
// }

// void FillArray(int[,] matr)//метод для генерации случайных чисел в созданную матрицу
// {
//     for (int i = 0; i < matr.GetLength(0); i++)
//     {
//         for (int j = 0; j < matr.GetLength(1); j++)
//         {
//             matr[i,j] = new Random().Next(1,10);// присваиваем числа matr [i,j] через генератор случайных чисел 
//         }
//     }
// }

// PrintArray(matrix);
// FillArray(matrix);
// Console.WriteLine();
// PrintArray(matrix);


//===> 3 Закрашивание области

// int[,] pic = new int[,]// не нужно указывать кол-во строчек и столбцов, если есть иксированные данные.
// {
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };

// void PrintImage(int[,] image)// метод который рисует контур картинки
// {
//  for (int i = 0; i < image.GetLength(0); i++)
//  {
//     for (int j = 0; j < image.GetLength(1); j++)
//     {
//         if(image[i,j] == 0) Console.Write($" ");// Если i,j = 0, то в ячейках размещается пробел.
//         else Console.Write($"+");// в противном случае +
//     }
//     Console.WriteLine();
//  }
// }

// void FillImage(int row, int col)// метод который закрашивает картинку
// {
//  if (pic[row, col] == 0)
//  {
//  pic[row, col] = 1;//все 0 красимв 1
//  FillImage(row - 1, col);//проверяем наличие ноля вверху
//  FillImage(row, col - 1);//слева
//  FillImage(row + 1, col);//снизу
//  FillImage(row, col + 1);//справа
//  }
// }

// PrintImage(pic);
// FillImage(13, 13);//стартовая случайная точка. Важно чтобы она была внутри изображения
// PrintImage(pic);

//Рекурсия -  это функция, которая вызывает сама себя.
//=>Вычисление факториала

double Factorial(int n)//при получении результата будут появляться отрицательные числа, это значит что такие большие числа не вмещаются в тип данных int, его нужно заменить на double.
{
 // 1! = 1
 // 0! = 1
 if(n == 1) return 1;//если 1 то возвращаем 1
 else return n * Factorial(n-1);//если не 1 то возвращаем факториал предыдущего числа
}
for (int i = 1; i < 40; i++)//выводим факториал каждого исла до 40
{
 Console.WriteLine($"{i}! = {Factorial(i)}");//перед результатом выводится число, факториал когорого мы ищем.
}

//==> Вычисление чисел Фибоначчи

double Fibonacci(int n)
{
 if(n == 1 || n == 2) return 1;
 else return Fibonacci(n-1) + Fibonacci(n-2);
}
for (int i = 1; i < 50; i++)
{
 Console.WriteLine($"f({i}) = {Fibonacci(i)}");
}